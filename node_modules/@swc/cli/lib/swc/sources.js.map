{"version":3,"sources":["../../src/swc/sources.ts"],"sourcesContent":["import glob from \"fast-glob\";\nimport slash from \"slash\";\nimport { stat } from 'fs';\nimport { join, basename, extname } from \"path\";\n\n/**\n * Find all input files based on source globs\n */\nexport async function globSources(\n  sources: string[],\n  includeDotfiles = false\n): Promise<string[]> {\n  const globConfig = {\n    dot: includeDotfiles,\n    nodir: true,\n  };\n\n  const files = await Promise.all(\n    sources\n      .filter(source => includeDotfiles || !basename(source).startsWith(\".\"))\n      .map((source) => {\n        return new Promise<string[]>(resolve => {\n          stat(source, (err, stat) => {\n            if (err) {\n              resolve([]);\n              return;\n            }\n            if (!stat.isDirectory()) {\n              resolve([source])\n            } else {\n              glob(slash(join(source, \"**\")), globConfig)\n                .then((matches) => resolve(matches))\n                .catch(() => resolve([]))\n            }\n          });\n        });\n      })\n  );\n\n  return Array.from(new Set<string>(files.flat()));\n}\n\ntype Split = [\n  compilable: string[],\n  copyable: string[]\n]\n\n\n/**\n * Test if a filename ends with a compilable extension.\n */\nexport function isCompilableExtension(\n  filename: string,\n  allowedExtension: string[]\n): boolean {\n  const ext = extname(filename);\n  return allowedExtension.includes(ext);\n}\n\n/**\n * Split file list to files that can be compiled and copied\n */\nexport function slitCompilableAndCopyable(\n  files: string[],\n  allowedExtension: string[],\n  copyFiles: boolean\n): Split {\n  const compilable: string[] = [];\n  const copyable: string[] = [];\n\n  for (const file of files) {\n    const isCompilable = isCompilableExtension(file, allowedExtension);\n\n    if (isCompilable) {\n      compilable.push(file)\n    } else if (copyFiles) {\n      copyable.push(file)\n    }\n  }\n\n  return [compilable, copyable];\n}\n\nexport async function requireChokidar() {\n  try {\n    const { default: chokidar } = await import('chokidar');\n    return chokidar;\n  }\n  catch (err) {\n    console.error(\n      \"The optional dependency chokidar is not installed and is required for \" +\n      \"--watch. Chokidar is likely not supported on your platform.\"\n    );\n    throw err;\n  }\n}\n\nexport async function watchSources(\n  sources: string[],\n  includeDotfiles = false\n) {\n  const chokidar = await requireChokidar();\n\n  return chokidar.watch(sources, {\n    ignored: includeDotfiles\n      ? undefined\n      : (filename: string) => basename(filename).startsWith(\".\"),\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 50,\n      pollInterval: 10\n    }\n  });\n}"],"names":[],"mappings":";;;;QAQsB,WAAW,GAAX,WAAW;QA2CjB,qBAAqB,GAArB,qBAAqB;QAWrB,yBAAyB,GAAzB,yBAAyB;QAqBnB,eAAe,GAAf,eAAe;QAcf,YAAY,GAAZ,YAAY;AAjGjB,GAAW,CAAX,SAAW;AACV,GAAO,CAAP,MAAO;AACJ,GAAI,CAAJ,GAAI;AACe,GAAM,CAAN,KAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAKxB,WAAW,CAC/B,OAAiB,EACjB,eAAe,GAAG,KAAK,EACJ,CAAC;IACpB,KAAK,CAAC,UAAU;QACd,GAAG,EAAE,eAAe;QACpB,KAAK,EAAE,IAAI;;IAGb,KAAK,CAAC,KAAK,SAAS,OAAO,CAAC,GAAG,CAC7B,OAAO,CACJ,MAAM,EAAC,MAAM,GAAI,eAAe,SAhBC,KAAM,WAgBO,MAAM,EAAE,UAAU,EAAC,CAAG;MACpE,GAAG,EAAE,MAAM,GAAK,CAAC;eACT,GAAG,CAAC,OAAO,EAAW,OAAO,GAAI,CAAC;gBAnB5B,GAAI,OAoBV,MAAM,GAAG,GAAG,EAAE,IAAI,GAAK,CAAC;gBAC3B,EAAE,EAAE,GAAG,EAAE,CAAC;oBACR,OAAO;;gBAET,CAAC;gBACD,EAAE,GAAG,IAAI,CAAC,WAAW,IAAI,CAAC;oBACxB,OAAO;wBAAE,MAAM;;gBACjB,CAAC,MAAM,CAAC;wBA7BH,SAAW,cACV,MAAO,cAEe,KAAM,OA2BhB,MAAM,GAAE,EAAI,KAAI,UAAU,EACvC,IAAI,EAAE,OAAO,GAAK,OAAO,CAAC,OAAO;sBACjC,KAAK,KAAO,OAAO;;gBACxB,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;WAGE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAS,KAAK,CAAC,IAAI;AAC9C,CAAC;SAWe,qBAAqB,CACnC,QAAgB,EAChB,gBAA0B,EACjB,CAAC;IACV,KAAK,CAAC,GAAG,OApD6B,KAAM,UAoDxB,QAAQ;WACrB,gBAAgB,CAAC,QAAQ,CAAC,GAAG;AACtC,CAAC;SAKe,yBAAyB,CACvC,KAAe,EACf,gBAA0B,EAC1B,SAAkB,EACX,CAAC;IACR,KAAK,CAAC,UAAU;IAChB,KAAK,CAAC,QAAQ;SAET,KAAK,CAAC,IAAI,IAAI,KAAK,CAAE,CAAC;QACzB,KAAK,CAAC,YAAY,GAAG,qBAAqB,CAAC,IAAI,EAAE,gBAAgB;QAEjE,EAAE,EAAE,YAAY,EAAE,CAAC;YACjB,UAAU,CAAC,IAAI,CAAC,IAAI;QACtB,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC;YACrB,QAAQ,CAAC,IAAI,CAAC,IAAI;QACpB,CAAC;IACH,CAAC;;QAEO,UAAU;QAAE,QAAQ;;AAC9B,CAAC;eAEqB,eAAe,GAAG,CAAC;QACnC,CAAC;QACH,KAAK,GAAG,OAAO,EAAE,QAAQ;oDAAkB,QAAU;;eAC9C,QAAQ;IACjB,CAAC,QACM,GAAG,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,EACX,sEAAwE,KACxE,2DAA6D;QAE/D,KAAK,CAAC,GAAG;IACX,CAAC;AACH,CAAC;eAEqB,YAAY,CAChC,OAAiB,EACjB,eAAe,GAAG,KAAK,EACvB,CAAC;IACD,KAAK,CAAC,QAAQ,SAAS,eAAe;WAE/B,QAAQ,CAAC,KAAK,CAAC,OAAO;QAC3B,OAAO,EAAE,eAAe,GACpB,SAAS,IACR,QAAgB,OAvGe,KAAM,WAuGP,QAAQ,EAAE,UAAU,EAAC,CAAG;;QAC3D,aAAa,EAAE,IAAI;QACnB,gBAAgB;YACd,kBAAkB,EAAE,EAAE;YACtB,YAAY,EAAE,EAAE;;;AAGtB,CAAC"}