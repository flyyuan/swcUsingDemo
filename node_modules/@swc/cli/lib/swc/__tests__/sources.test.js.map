{"version":3,"sources":["../../../src/swc/__tests__/sources.test.ts"],"sourcesContent":["import { globSources, slitCompilableAndCopyable } from \"../sources\";\nimport fs from 'fs'\nimport glob from \"fast-glob\";\n\njest.mock('fs');\njest.mock('fast-glob');\n\ndescribe('globSources', () => {\n  beforeEach(() => {\n    (fs as any).resetMockStats();\n  });\n\n  it(\"exclude dotfiles sources when includeDotfiles=false\", async () => {\n    const files = await globSources([\".dotfile\"], false);\n\n    expect([...files]).toEqual([]);\n  });\n\n  it(\"include dotfiles sources when includeDotfiles=true\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } })\n    const files = await globSources([\".dotfile\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n\n  it(\"include multiple file sources\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ \"file\": { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual(['.dotfile', \"file\"]);\n  });\n\n  it(\"exclude files that errors on stats\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ \"file\": new Error('Failed stat') });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual(['.dotfile']);\n  });\n\n  it(\"includes all files from directory\", async () => {\n    (fs as any).setMockStats({ \"directory\": { isDirectory: () => true } });\n    (fs as any).setMockStats({ \"file\": { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockResolvedValue([\"fileDir1\", \"fileDir2\"]);\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\n      \"file\",\n      \"fileDir1\",\n      \"fileDir2\"\n    ]);\n  });\n\n  it(\"exclude files from directory that fail to glob\", async () => {\n    (fs as any).setMockStats({ \"directory\": { isDirectory: () => true } });\n    (fs as any).setMockStats({ \"file\": { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockRejectedValue(new Error(\"Failed\"));\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\n      \"file\",\n    ]);\n  });\n});\n\ndescribe('slitCompilableAndCopyable', () => {\n  const extensions = [\".ts\"]\n  it('separate compilable and copyable when copyFiles=true', () => {\n    const files = [\n      \"test.ts\",\n      \"test.txt\"\n    ];\n    const [compilable, copyable] = slitCompilableAndCopyable(files, extensions, true);\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([\"test.txt\"]);\n  });\n\n  it('separate compilable and copyable when copyFiles=false', () => {\n    const files = [\n      \"test.ts\",\n      \"test.txt\"\n    ];\n    const [compilable, copyable] = slitCompilableAndCopyable(files, extensions, false);\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([]);\n  });\n});\n"],"names":[],"mappings":"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"}