{"version":3,"sources":["../../src/swc/file.ts"],"sourcesContent":["import swc from \"@swc/core\";\nimport path from \"path\";\nimport slash from \"slash\";\nimport { SourceMapConsumer, SourceMapGenerator } from \"source-map\";\n\nimport { CliOptions } from \"./options\";\nimport { globSources, isCompilableExtension, watchSources } from \"./sources\";\nimport * as util from \"./util\";\n\nexport default async function ({\n  cliOptions,\n  swcOptions\n}: {\n  cliOptions: CliOptions;\n  swcOptions: swc.Options;\n}) {\n  async function concatResults(\n    file: string,\n    ...results: swc.Output[]\n  ): Promise<swc.Output> {\n    const map = new SourceMapGenerator({\n      file,\n      sourceRoot: swcOptions.sourceRoot\n    });\n\n    let code = \"\";\n    let offset = 0;\n\n    for (const result of results) {\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        const consumer = await new SourceMapConsumer(result.map);\n        const sources = new Set<string>();\n\n        consumer.eachMapping(mapping => {\n          sources.add(mapping.source);\n          map.addMapping({\n            generated: {\n              line: mapping.generatedLine + offset,\n              column: mapping.generatedColumn\n            },\n            original: {\n              line: mapping.originalLine,\n              column: mapping.originalColumn\n            },\n            source: mapping.source\n          });\n        });\n\n        sources.forEach(source => {\n          const content = consumer.sourceContentFor(source, true);\n          if (content !== null) {\n            map.setSourceContent(source, content);\n          }\n        });\n      }\n      offset = code.split(\"\\n\").length - 1;\n    }\n\n    return {\n      code,\n      map: JSON.stringify(map)\n    };\n  }\n\n  async function output(results: Iterable<swc.Output>) {\n    const file = cliOptions.sourceMapTarget || path.basename(cliOptions.outFile || \"stdout\");\n\n    const result = await concatResults(file, ...results);\n\n    if (cliOptions.outFile) {\n      util.outputFile(result, cliOptions.outFile, swcOptions.sourceMaps);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n      if (result.map) {\n        const map = `//#sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(result.map), 'utf8').toString('base64')}`\n        process.stdout.write(map);\n      }\n    }\n  }\n\n  async function handle(filename: string) {\n    const sourceFileName = slash(\n      cliOptions.outFile\n        ? path.relative(path.dirname(cliOptions.outFile), filename)\n        : filename\n    );\n    return await util.compile(\n      filename,\n      {\n        ...swcOptions,\n        sourceFileName,\n      },\n      cliOptions.sync,\n      cliOptions.outFile\n    );\n  }\n\n  async function getProgram(previousResults: Map<string, swc.Output | Error> = new Map()) {\n    const results: typeof previousResults = new Map();\n\n    for (const filename of await globSources(cliOptions.filenames, cliOptions.includeDotfiles)) {\n      if (isCompilableExtension(filename, cliOptions.extensions)) {\n        results.set(filename, previousResults.get(filename)!);\n      }\n    }\n    return results;\n  }\n\n  async function files() {\n    let results = await getProgram();\n    for (const filename of results.keys()) {\n      try {\n        const result = await handle(filename);\n        if (result) {\n          results.set(filename, result);\n        } else {\n          results.delete(filename);\n        }\n      } catch (err) {\n        console.error(err.message);\n        results.set(filename, err);\n      }\n    }\n\n    if (cliOptions.watch) {\n      const watcher = await watchSources(cliOptions.filenames, cliOptions.includeDotfiles);\n      watcher.on('ready', () => {\n        Promise.resolve()\n          .then(async () => {\n            util.assertCompilationResult(results, cliOptions.quiet);\n            await output(results.values());\n            if (!cliOptions.quiet) {\n              console.info('Watching for file changes.')\n            }\n          })\n          .catch((err) => {\n            console.error(err.message);\n          });\n      });\n      watcher.on(\"add\", async (filename) => {\n        if (isCompilableExtension(filename, cliOptions.extensions)) {\n          // ensure consistent insertion order when files are added\n          results = await getProgram(results);\n        }\n      });\n      watcher.on(\"unlink\", (filename) => {\n        results.delete(filename);\n      });\n      for (const type of [\"add\", \"change\"]) {\n        watcher.on(type, (filename) => {\n          if (!isCompilableExtension(filename, cliOptions.extensions)) {\n            return;\n          }\n\n          const start = process.hrtime();\n\n          handle(filename)\n            .then(async (result) => {\n              if (!result) {\n                results.delete(filename);\n                return;\n              }\n              results.set(filename, result);\n              util.assertCompilationResult(results, true);\n              await output(results.values());\n              if (!cliOptions.quiet) {\n                const [seconds, nanoseconds] = process.hrtime(start);\n                const ms = seconds * 1000 + (nanoseconds * 1e-6);\n                const name = path.basename(cliOptions.outFile);\n                console.log(`Compiled ${name} in ${ms.toFixed(2)}ms`);\n              }\n            })\n            .catch((err) => {\n              console.error(err.message);\n            });\n        });\n      }\n    } else {\n      util.assertCompilationResult(results, cliOptions.quiet);\n      await output(results.values());\n    }\n  }\n\n  async function stdin() {\n    let code = \"\";\n    process.stdin.setEncoding(\"utf8\");\n    for await (const chunk of process.stdin) {\n      code += chunk;\n    }\n    const res = await util.transform(\n      cliOptions.filename,\n      code,\n      {\n        ...swcOptions,\n        sourceFileName: \"stdin\"\n      },\n      cliOptions.sync,\n      undefined\n    );\n\n    output([res]);\n  }\n\n  if (cliOptions.filenames.length) {\n    await files();\n  } else {\n    await stdin();\n  }\n}\n"],"names":[],"mappings":"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"}